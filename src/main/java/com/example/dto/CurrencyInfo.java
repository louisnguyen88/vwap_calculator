/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CurrencyInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5413745271878800355L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CurrencyInfo\",\"namespace\":\"com.example.dto\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"volume\",\"type\":\"double\"},{\"name\":\"currencyPair\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CurrencyInfo> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CurrencyInfo> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CurrencyInfo> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CurrencyInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CurrencyInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CurrencyInfo to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CurrencyInfo from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CurrencyInfo instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CurrencyInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long timestamp;
  private double price;
  private double volume;
  private java.lang.String currencyPair;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CurrencyInfo() {}

  /**
   * All-args constructor.
   * @param timestamp The new value for timestamp
   * @param price The new value for price
   * @param volume The new value for volume
   * @param currencyPair The new value for currencyPair
   */
  public CurrencyInfo(java.lang.Long timestamp, java.lang.Double price, java.lang.Double volume, java.lang.String currencyPair) {
    this.timestamp = timestamp;
    this.price = price;
    this.volume = volume;
    this.currencyPair = currencyPair;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return price;
    case 2: return volume;
    case 3: return currencyPair;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: price = (java.lang.Double)value$; break;
    case 2: volume = (java.lang.Double)value$; break;
    case 3: currencyPair = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public double getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'volume' field.
   * @return The value of the 'volume' field.
   */
  public double getVolume() {
    return volume;
  }


  /**
   * Sets the value of the 'volume' field.
   * @param value the value to set.
   */
  public void setVolume(double value) {
    this.volume = value;
  }

  /**
   * Gets the value of the 'currencyPair' field.
   * @return The value of the 'currencyPair' field.
   */
  public java.lang.String getCurrencyPair() {
    return currencyPair;
  }


  /**
   * Sets the value of the 'currencyPair' field.
   * @param value the value to set.
   */
  public void setCurrencyPair(java.lang.String value) {
    this.currencyPair = value;
  }

  /**
   * Creates a new CurrencyInfo RecordBuilder.
   * @return A new CurrencyInfo RecordBuilder
   */
  public static com.example.dto.CurrencyInfo.Builder newBuilder() {
    return new com.example.dto.CurrencyInfo.Builder();
  }

  /**
   * Creates a new CurrencyInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CurrencyInfo RecordBuilder
   */
  public static com.example.dto.CurrencyInfo.Builder newBuilder(com.example.dto.CurrencyInfo.Builder other) {
    if (other == null) {
      return new com.example.dto.CurrencyInfo.Builder();
    } else {
      return new com.example.dto.CurrencyInfo.Builder(other);
    }
  }

  /**
   * Creates a new CurrencyInfo RecordBuilder by copying an existing CurrencyInfo instance.
   * @param other The existing instance to copy.
   * @return A new CurrencyInfo RecordBuilder
   */
  public static com.example.dto.CurrencyInfo.Builder newBuilder(com.example.dto.CurrencyInfo other) {
    if (other == null) {
      return new com.example.dto.CurrencyInfo.Builder();
    } else {
      return new com.example.dto.CurrencyInfo.Builder(other);
    }
  }

  /**
   * RecordBuilder for CurrencyInfo instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CurrencyInfo>
    implements org.apache.avro.data.RecordBuilder<CurrencyInfo> {

    private long timestamp;
    private double price;
    private double volume;
    private java.lang.String currencyPair;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.dto.CurrencyInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.volume)) {
        this.volume = data().deepCopy(fields()[2].schema(), other.volume);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.currencyPair)) {
        this.currencyPair = data().deepCopy(fields()[3].schema(), other.currencyPair);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing CurrencyInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.dto.CurrencyInfo other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.volume)) {
        this.volume = data().deepCopy(fields()[2].schema(), other.volume);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.currencyPair)) {
        this.currencyPair = data().deepCopy(fields()[3].schema(), other.currencyPair);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.example.dto.CurrencyInfo.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.example.dto.CurrencyInfo.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public double getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.example.dto.CurrencyInfo.Builder setPrice(double value) {
      validate(fields()[1], value);
      this.price = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.example.dto.CurrencyInfo.Builder clearPrice() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'volume' field.
      * @return The value.
      */
    public double getVolume() {
      return volume;
    }


    /**
      * Sets the value of the 'volume' field.
      * @param value The value of 'volume'.
      * @return This builder.
      */
    public com.example.dto.CurrencyInfo.Builder setVolume(double value) {
      validate(fields()[2], value);
      this.volume = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'volume' field has been set.
      * @return True if the 'volume' field has been set, false otherwise.
      */
    public boolean hasVolume() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'volume' field.
      * @return This builder.
      */
    public com.example.dto.CurrencyInfo.Builder clearVolume() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'currencyPair' field.
      * @return The value.
      */
    public java.lang.String getCurrencyPair() {
      return currencyPair;
    }


    /**
      * Sets the value of the 'currencyPair' field.
      * @param value The value of 'currencyPair'.
      * @return This builder.
      */
    public com.example.dto.CurrencyInfo.Builder setCurrencyPair(java.lang.String value) {
      validate(fields()[3], value);
      this.currencyPair = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'currencyPair' field has been set.
      * @return True if the 'currencyPair' field has been set, false otherwise.
      */
    public boolean hasCurrencyPair() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'currencyPair' field.
      * @return This builder.
      */
    public com.example.dto.CurrencyInfo.Builder clearCurrencyPair() {
      currencyPair = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CurrencyInfo build() {
      try {
        CurrencyInfo record = new CurrencyInfo();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.price = fieldSetFlags()[1] ? this.price : (java.lang.Double) defaultValue(fields()[1]);
        record.volume = fieldSetFlags()[2] ? this.volume : (java.lang.Double) defaultValue(fields()[2]);
        record.currencyPair = fieldSetFlags()[3] ? this.currencyPair : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CurrencyInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<CurrencyInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CurrencyInfo>
    READER$ = (org.apache.avro.io.DatumReader<CurrencyInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.timestamp);

    out.writeDouble(this.price);

    out.writeDouble(this.volume);

    out.writeString(this.currencyPair);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.timestamp = in.readLong();

      this.price = in.readDouble();

      this.volume = in.readDouble();

      this.currencyPair = in.readString();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.timestamp = in.readLong();
          break;

        case 1:
          this.price = in.readDouble();
          break;

        case 2:
          this.volume = in.readDouble();
          break;

        case 3:
          this.currencyPair = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










